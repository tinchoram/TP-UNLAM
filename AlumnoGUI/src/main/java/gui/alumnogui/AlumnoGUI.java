package gui.alumnogui;

import java.awt.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.table.*;
import dao.DAOFactory;
import dao.DaoException;
import dao.DaoFactoryException;
import gui.alumnogui.dialog.AlumnoDialog;
import gui.alumnogui.mappers.AlumnoMapper;
import gui.persona.Alumno;
import gui.persona.PersonaException;
import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class AlumnoGUI extends javax.swing.JFrame {
    
    private static final int TIPO_TXT = 0;
    private static final int TIPO_SQL = 1;

    /**
     * Creates new form AlumnoGUI
     */
    public AlumnoGUI() {
            initComponents();
            setTitle("Alumno GUI");
            setLocationRelativeTo(null);
            
            disaleButtons();
            
            AlumnoTableModel alumnoModel = new AlumnoTableModel();
            
        try {
            // Simulaci√≥n (TODO quitar)
            List<Alumno> alumnos = new ArrayList<>();
            Alumno alu1 = new Alumno();
            Alumno alu2 = new Alumno();
            
            alu1.setDni(12345678);
            alu1.setNombre("NombreUno");
            alu1.setApellido("ApellidoUno");
            alu1.setFechaNac(LocalDate.now());
            
            alu2.setDni(9999999);
            alu2.setNombre("NombreDos");
            alu2.setApellido("ApellidoDos");
            alu2.setFechaNac(LocalDate.now().plusDays(45));
            
            alumnos.add(alu1);
            alumnos.add(alu2);
            
            alumnoModel.setAlumnos(alumnos);
            
            alumnosTable.setModel(alumnoModel);
        } catch (PersonaException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - Martin
    private void initComponents() {
        jScrollPane1 = new JScrollPane();
        alumnosTable = new JTable();
        crearButton = new JButton();
        modificarButton = new JButton();
        borrarButton = new JButton();
        jButton4 = new JButton();
        selectorRepoComboBox = new JComboBox<>();
        jLabel1 = new JLabel();
        browseButton = new JButton();
        fullpathTextField = new JTextField();
        jCheckBox1 = new JCheckBox();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        var contentPane = getContentPane();

        //======== jScrollPane1 ========
        {

            //---- alumnosTable ----
            alumnosTable.setModel(new DefaultTableModel(
                new Object[][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                },
                new String[] {
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
            ));
            jScrollPane1.setViewportView(alumnosTable);
        }

        //---- crearButton ----
        crearButton.setText("Crear");
        crearButton.addActionListener(e -> crearButtonActionPerformed(e));

        //---- modificarButton ----
        modificarButton.setText("Modificar");
        modificarButton.addActionListener(e -> {
            try {
                modificarButtonActionPerformed(e);
            } catch (PersonaException ex) {
                throw new RuntimeException(ex);
            }
        });

        //---- borrarButton ----
        borrarButton.setText("Borrar");
        borrarButton.addActionListener(e -> borrarButtonActionPerformed(e));

        //---- jButton4 ----
        jButton4.setText("Consultar");
        jButton4.addActionListener(e -> jButton4ActionPerformed(e));

        //---- selectorRepoComboBox ----
        selectorRepoComboBox.setModel(new DefaultComboBoxModel<>(new String[] {
            "TXT",
            "SQL"
        }));
        selectorRepoComboBox.addActionListener(e -> selectorRepoComboBoxActionPerformed(e));

        //---- jLabel1 ----
        jLabel1.setText("Seleccione repositorio:");

        //---- browseButton ----
        browseButton.setText("...");
        browseButton.addActionListener(e -> browseButtonActionPerformed(e));

        //---- fullpathTextField ----
        fullpathTextField.setEditable(false);
        fullpathTextField.setBackground(new Color(0xcccccc));

        //---- jCheckBox1 ----
        jCheckBox1.setText("Solo los activos");

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 503, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(crearButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(modificarButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(borrarButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)))
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(fullpathTextField, GroupLayout.Alignment.LEADING)
                                    .addGroup(contentPaneLayout.createSequentialGroup()
                                        .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 176, GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(selectorRepoComboBox, GroupLayout.PREFERRED_SIZE, 156, GroupLayout.PREFERRED_SIZE)
                                        .addGap(55, 55, 55)
                                        .addComponent(browseButton, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jCheckBox1, GroupLayout.PREFERRED_SIZE, 129, GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(selectorRepoComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(browseButton))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(fullpathTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                    .addComponent(jCheckBox1)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addComponent(crearButton)
                            .addGap(18, 18, 18)
                            .addComponent(modificarButton)
                            .addGap(18, 18, 18)
                            .addComponent(borrarButton)
                            .addGap(26, 26, 26)
                            .addComponent(jButton4)))
                    .addGap(102, 102, 102))
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        File dir = new File("C:\\Users\\g.guzman\\Documents\\NetBeansProjects\\2024\\Unificado\\TestDao");
        chooser.setCurrentDirectory(dir);
        int resp = chooser.showOpenDialog(jLabel1);
        if (resp!=JFileChooser.APPROVE_OPTION) {
            return;
        }
        fullpathTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        crearButton.setEnabled(true);
        modificarButton.setEnabled(true);
    }//GEN-LAST:event_browseButtonActionPerformed

    private void selectorRepoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorRepoComboBoxActionPerformed
        if (selectorRepoComboBox.getSelectedIndex()==TIPO_TXT) {
            browseButton.setVisible(true);
            fullpathTextField.setVisible(true);
        }
        else {
            browseButton.setVisible(false);
            fullpathTextField.setVisible(false);
        }
    }//GEN-LAST:event_selectorRepoComboBoxActionPerformed

    private void modificarButtonActionPerformed(java.awt.event.ActionEvent evt) throws PersonaException {//GEN-FIRST:event_modificarButtonActionPerformed
        int rowSlected = alumnosTable.getSelectedRow();
        if (rowSlected<0) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un alumno", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        // TODO ...
        Alumno alumno = getAlumnoSeleccionado(rowSlected);
        
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.UPDATE);
        alumnoDialog.setDto(AlumnoMapper.alumno2Dto(alumno));
        alumnoDialog.setVisible(true); // se suspende la ejecuci√≥n
        
        Map<String, String> configMap = new HashMap<>();
        configMap.put(DAOFactory.TIPO_DAO, DAOFactory.TIPO_DAO_TXT);
        String fullpath = fullpathTextField.getText();
        configMap.put(DAOFactory.FULL_PATH, fullpath);
        try {
            // Recupero los datos cargador en el di√°logo
            dao.DAO dao = DAOFactory.getInstance().crearDAO(configMap);
        } catch (DaoFactoryException ex) {
            Logger.getLogger(AlumnoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //dao.update(AlumnoMapper.dto2Alumno(alumnoDialog.getDto()));
        alumno = AlumnoMapper.dto2Alumno(alumnoDialog.getDto());
        System.out.println("alumno a persistir ==> "+alumno.getDni() + "- "+alumno.getNombre()+ "- "+alumno.getFechaNac());
                
    }//GEN-LAST:event_modificarButtonActionPerformed

    private void borrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarButtonActionPerformed
        int rowSlected = alumnosTable.getSelectedRow();
        if (rowSlected<0) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un alumno", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            Alumno alumno = getAlumnoSeleccionado(rowSlected);
            
            int resp = JOptionPane.showConfirmDialog(this, "¬øEst√° seguro de borrar el alumno "
                    + "("+alumno.getDni()+" - " +alumno.getNombre()+")?", "Confirmaci√≥n de borrado", JOptionPane.OK_CANCEL_OPTION);
            if (resp!=JOptionPane.OK_OPTION) {
                return;
            }
            System.out.println("Se borra el alumno");
            // Borrar
        }
    }//GEN-LAST:event_borrarButtonActionPerformed

    private Alumno getAlumnoSeleccionado(int rowSlected) {
        AlumnoTableModel alumnoTableModel = (AlumnoTableModel) alumnosTable.getModel();
        List<Alumno> alumnos = alumnoTableModel.getAlumnos();
        Alumno alumno = alumnos.get(rowSlected);
        return alumno;
    }

    private void crearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearButtonActionPerformed
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.CREATE);
        alumnoDialog.setVisible(true);
        
        System.out.println("Se cerr√≥ el modal");
    }//GEN-LAST:event_crearButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        AlumnoDialog alumnoDialog = new AlumnoDialog(this, true, AlumnoDialog.READ);
        alumnoDialog.setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlumnoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlumnoGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Martin
    private JScrollPane jScrollPane1;
    private JTable alumnosTable;
    private JButton crearButton;
    private JButton modificarButton;
    private JButton borrarButton;
    private JButton jButton4;
    private JComboBox<String> selectorRepoComboBox;
    private JLabel jLabel1;
    private JButton browseButton;
    private JTextField fullpathTextField;
    private JCheckBox jCheckBox1;
    // End of variables declaration//GEN-END:variables

    private void disaleButtons() {
        crearButton.setEnabled(true);
        modificarButton.setEnabled(true);
    }
}
